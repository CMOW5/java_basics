/*
 * This Java source file was generated by the Gradle 'init' task.
 */
import org.junit.Before;
import org.junit.Test;

import task_scheduler.Utils;
import task_scheduler.WorkPeriod;

import static org.junit.Assert.*;

import java.time.DayOfWeek;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

public class TaskSchedulerTest {
	
	private DayOfWeek THURSDAY;
	private DayOfWeek FRIDAY;
	private DayOfWeek MONDAY;

	@Before public void setUp() {
		THURSDAY = DayOfWeek.THURSDAY;
		FRIDAY = DayOfWeek.FRIDAY;
		MONDAY = DayOfWeek.MONDAY;
	}
	
    @Test public void testGenerateWorkPeriods() {
    	LocalDate thur24May2017 = LocalDate.of(2018, 5, 24);
    	List<WorkPeriod> workPeriods = Utils.generateWorkPeriods(thur24May2017, 3);
    	assertEquals(6, workPeriods.size());
    	assertEquals(Arrays.asList(THURSDAY, FRIDAY, MONDAY), workPeriods.stream()
    			.map(WorkPeriod::getStartTime)
    			.map(LocalDateTime::getDayOfWeek)
    			.distinct()
    			.collect(Collectors.toList()));
    }
    
    @Test public void basicSplitTest() {
    	LocalDateTime startTime = LocalDate.now().atTime(23, 0);
    	LocalDateTime endTime = LocalDate.now().plusDays(1).atTime(1, 0);
    	WorkPeriod p = new WorkPeriod(startTime, endTime);
    	Optional<WorkPeriod> newPeriod = p.split();
    	
    	LocalDateTime midnight = LocalDate.now().plusDays(1).atStartOfDay();
    	assertEquals(Optional.of(new WorkPeriod(startTime, midnight)), newPeriod);
    	assertEquals(new WorkPeriod(midnight, endTime), p);

    }
}
